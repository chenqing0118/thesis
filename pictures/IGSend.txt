bool SendToFFSTarget(const vector<FFSPacket>& inPackets, cross::FFS_TARGET inTarget)
    {
         SInt8 packetBuffer[1024];
        cross::FFSFrame outFFSFrame;

        auto* version = new ce::net::Version();
        version->set_major(VsdVersion::Instance().GetMajor());
        version->set_minor(VsdVersion::Instance().GetMinor());
        outFFSFrame.set_allocated_version(version);

        for (int index = 0; index < inPackets.size(); ++index)
        {
            inPackets[index].SerializeToArray(packetBuffer, outLength);
            outFFSFrame.add_packets()->CopyFrom(packetBuffer);
        }

        AssembleFrameHeader(FFS_TARGET::SimulationDevice, 
            inTarget, inSimFrame.MessageNumber, outFFSFrame);
        
        auto packetLength = static_cast<int>(outFFSFrame.ByteSizeLong());
        outFFSFrame.SerializeToArray(packetBuffer, packetLength);

        std::string dst_busid = cross::TbusDomainContext::Instance().GetDstBusid(inTarget);
        TbusDomainContext::Instance().QueuePacket(
           dst_busid, reinterpret_cast<SInt32*>(packetBuffer), outLength);
        return true;
    }