/* Callback function invoked by libpcap for every incoming packet */
    void MacLinkCommuncation::OnDataLinkLayerReceived(const struct pcap_pkthdr* header, 
            const u_char* pkt_data, std::vector<MacLogicFramePacket>& outPackets)
    {
        // Parse mac header + cae header + cae external header
        SInt32 cursorOffset = 0;
        SInt8 const* cursor = reinterpret_cast<SInt8 const*>(pkt_data);

        SimToIGLinkLayerHeader macDataLinkHeader;
        cursorOffset +=PraseMacLinkLayerHeader(cursor, macDataLinkHeader);
        cursor += cursorOffset;
      
        // Parse packets
        SInt32 leftBytesToRead = macDataLinkHeader.byte_to_send_count;
        auto currentFramePacketPtr = &outPackets.emplace_back();

        UInt32 frameMsgNumber = macDataLinkHeader.vis_msg_number;
        currentFramePacketPtr->MessageNumber = frameMsgNumber;
        while (leftBytesToRead > 0)
        {
            if (currentFramePacketPtr->is_full())
            {
                currentFramePacketPtr = &outPackets.emplace_back();
                currentFramePacketPtr->MessageNumber = frameMsgNumber;
            }

            auto curPacketLength = (*(reinterpret_cast<SInt16 const*>(cursor + 2)))
                                 * sizeof(SInt32) + sizeof(SInt32) * 2;

            SInt8* packetBuffer = new SInt8[curPacketLength];
            MacEncodingPacket packet(packetBuffer, curPacketLength);
            
            memcpy(reinterpret_cast<SInt8*>(packet.Buffer.get()), cursor, curPacketLength);
            currentFramePacketPtr->push_back(std::move(packet));

            leftBytesToRead -= curPacketLength;
            cursor += curPacketLength;
        }
    }