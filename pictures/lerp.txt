    void OnBeginFrame(FrameParam* frameParam)
    {
        mMessageNumber = frameParam->GetFrameCount();
        UInt64 clockerTime = SyncClocker::GetInstance()->GetClockerTimeStampUs();
        clockerTimeLastFrame = clockerTime;

        int networkFrameRate = tbusSys->GetNetworkFrameRate(tbusComp.Read());
        if (networkFrameRate)
        {
            mNetworkFps = 1000.0 / networkFrameRate;   // Unit ms
            UInt32 cachedFrameCount = TbusppSetting::GetTbusppSetting().cachedFrameCount;
            UInt64 theoHandleTime=packet.send_time_us()/ 1000.0+cachedFrameCount*mNetworkFps;
            mFrameDelta = (clockerTime - theoHandleTime)/ mNetworkFps;
        }
    }
    void TickAircraftPosition(float deltaTime, GameWorld* inWorld)
    {
        float frameRemainedDelta = ffsSys->GetContext()->GetFrameRemainedDelta();
        // lerp position
        Double3 firstPositionToLerp = Double3(mX, mY, mZ);
        Double3 secondPositionToLerp = ffsSys->GetContext()->GetAircraftPoistionToLerp();
        if (!secondPositionToLerp.IsNearlyZero())
        {
             Double3 lerpedPosition = LerpStable(firstPositionToLerp, 
                      secondPositionToLerp, networkFrameRemainedDelta);
        }
        // lerp rotation
        Double3 firstRotationToLerp = Double3(mHeading, mPitch, mRoll);
        Double3 secondRotationToLerp = ffsSys->GetContext()->GetAircraftRotationToLerp();
        if (!secondRotationToLerp.IsNearlyZero())
        {
            Double3 lerpedRotation = LerpAngle<AngleType::Degree>(firstRotationToLerp,
                     secondRotationToLerp, networkFrameRemainedDelta);
        }
    }
