void MacReceivingTaskRunnable::Execute(SInt32 inQueueIndex, ThreadID currentThreadID)
    {
        // do data link layer net receiving logic
        do
        {
            MacLinkCommuncation::Instance().ReceiveData
              (MacReceivingTaskRunnable::OnDataLinkLayerReceived, reinterpret_cast<u_char*>(this));
        } while (!mQuitRequested);
    }

void MacReceivingTaskRunnable::OnDataLinkLayerReceived
                                (const struct pcap_pkthdr* header, const u_char* pkt_data)
    {
        static thread_local std::vector<MacLogicFramePacket> framePackets;
        MacLinkCommuncation::Instance().OnDataLinkLayerReceived(header, pkt_data, framePackets);
        // Flood fill in all eth packets 
        auto runnable = reinterpret_cast<MacReceivingTaskRunnable*>(param);
        std::for_each(framePackets.begin(), framePackets.end(), [&](auto& packet) {
            runnable->QueuePacket(std::move(packet), runnable->GetThreadID());
            });
        framePackets.clear();
        // Flood fill finished
        runnable->OnRecvEthernPacketsFinish();
    }